3. Сервитьор
Всеки добър ресторант има система за поръчки.
Тя служи не само за автоматизация на работата на сервитьорите, но и на кухнята.
Сервитьорът трябва да може да създава поръчка за определена маса,
а кухнята да сменя статуса й на “готви се”, “приготвена”,
съответно сервитьорът да може да я смени на “сервирана”.
Сервитьорът може да извади сметката за дадената маса,
което сменя статуса на “платена” и освобождава масата.
Всяка поръчка се състои от ястия и напитки от менюто.
Сервитьорът може да въвежда и променя менюто с имена, цени и тип.

Проектът трябва да може:
Не е нужно да има графичен интерфейс.
Трябва да има две роли: сервитьор и готвач.
Те се логват в началото на използването на програмата.
Готвачът единствено може да вижда новите поръчки и да сменя статуса им на “готви се” и “приготвена”
Сервитьорът може да променя менюто - да добавя или маха ястия. Всяко ястие има име, цена и тип.
Сервитьорът може да вижда менюто. В него ястията са разделени по тип.
Сервитьорът може да вижда списък с всички активни поръчки.
Сервитьорът може да създава и редактира поръчки.
Всяка поръчка си има дата и час на създаване и номер на маса.
Не може да се създаде повече от една поръчка за маса.
Към всяка поръчка може да се добавят или премахват ястия. Всяко ястие може да се добави веднъж или много пъти. Общата цена на поръчката се показва в реално време.
Сервитьорът може да смени статуса на поръчка на “сервирана”.
Сервитьорът може да смени статуса на поръчка на “платена”. Тогава му се показва обобщение на поръчката, тя изчезва от списъка с активни поръчки и на тази маса вече може да се прави нова поръчка.
Програмата записва данните си (менюто с ястия, данни за потребители, поръчки) във файл и при стартиране започва от там от където е спряла.

ВЪЗМОЖНИ ЕКСТРИ:
Таймер, който отбелязва последното обслужване на масата от сервитьора. Ако е изминал определен период от време, таймера светва в червено, напомняйки на сервитьора, че трябва да обслужи масата за отсервиране или нови поръчки.

Общи изисквания

проектите се разработват в екипи по двама
ползва се github с регулярни къмити от всички в екипа
използва се ООП
има написани Unit Tests с поне 70% code coverage
* има УАУ ефект (нещо, което не сме показвали на лекциите, свързано е с проекта и кара хората, които гледат проекта за кажат “УАУ”)
Критерии за оценяване
правилно използване на ООП концепции: конструктори, нива на достъп, статични методи и свойства
ООП дизайн: правилен подбор на класове и връзки между тях
спазване на SOLID принципи
качествен код: подходящо именуване и форматиране; спазване на добри практики
добро взаимодействие с потребителя
цялостност и завършено на проекта
адекватна обработка на грешки
Unit tests

